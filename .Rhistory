install.packages(c("devtools", "digest"))
library(projectTemplate)
library(ProjectTemplate)
create.project('bicdata')
setwd("bicdata/")
load.project()
load.project()
head(titanic)
load.project()
head(titanic)
library(RCurl)
?getURL
a <- getURL("https://dl.dropbox.com/u/8686172/titanic.csv")
a <- getURL("http://dl.dropbox.com/u/8686172/titanic.csv")
head(a)
a <- read.csv("http://dl.dropbox.com/u/8686172/titanic.csv")
head(a)
titanic <- read.csv("http://dl.dropbox.com/u/8686172/titanic.csv")
load.project()
load.project()
load.project()
install.packages("log4r")
load.project()
ls()
source("src/eda.R")
?ProjectTemplate
show.project()
stub.tests()
test.project()
load.project()
test.project()
expect_that(helper.function(), 1)
expect_that(helper.function(), 1)
test.project()
library(test_that)
library(testthat)
?expect_that
test.project()
helper.function()
test.project()
?test.project
test.project()
test.project()
stub.tests()
test.project()
test.project
library("testthat")
test_dir("tests")
?expect_that
expect_that(helper.function(), equals(1))
expect_that(helper.function(), equals(2))
expect_that(helper.function(), equals(2))
?test_dir
test_dir("tests/")
test_dir("tests")
test_dir
test_dir("tests")
test.project()
test.project()
?info
warn(logger, "This is warning")
scan("logs/project.log", what=character)
scan("logs/project.log", what="character")
?warn
load.project()
?ggplot2
qplot(carat, price, data = diamonds, geom="point" ,colour=clarity) #–(1)
ggplot(data=diamonds, aes(x=carat,y=price)) + geom_point(aes(colour=clarity))#–(2)
s <- ggplot(data=diamonds, aes(x=carat,y=price))
summary(s)
ggplot(data=diamonds, aes(x=carat,y=price)) + geom_point(aes(colour=clarity)) +
geom_smooth() # —(1)
colours
colours()
?colours
rainbow()
rainbow(1)
rainbow(1)pie(rep(1,12), col=rainbow(12))
pie(rep(1,12), col=rainbow(12))
rainbow(12)
col2rgb("darkblue")
rgb(0,0,139)
rgb(0,0,139, maxColorValue=255)
GetColorHexAndDecimal("darkblue")
GetColorHexAndDecimal <- function(color)
{
c <- col2rgb(color)
sprintf("#%02X%02X%02X %3d %3d %3d", c[1],c[2],c[3], c[1], c[2], c[3])
}
GetColorHexAndDecimal("darkblue")
ggplot(data=diamonds, aes(x=price)) + geom_bar(aes(fill=cut), binwidth=3000, position="fill")
ggplot(data=diamonds, aes(x=price)) + geom_bar(binwidth=3000) + facet_grid( . ~ cut)
ggplot(data=diamonds, aes(x=price)) + geom_bar(aes(fill=cut), binwidth=3000, position="fill")
ggplot(data=diamonds, aes(x=price)) + geom_bar(aes(fill=cut), binwidth=3000, position="fill") +
xlab("가격") + ylab("빈도") +
scale_fill_discrete("커팅")
?scale_fill_discrete
ggplot(data=diamonds, aes(x=price)) + geom_bar(aes(fill=cut), binwidth=3000, position="fill") +
xlab("가격") + ylab("빈도") +
scale_fill_discrete("커팅", c=50)
ggplot(data=diamonds, aes(x=price)) + geom_bar(aes(fill=cut), binwidth=3000, position="fill") +
xlab("가격") + ylab("빈도") +
scale_fill_discrete("커팅", c=150)
ggplot(data=diamonds, aes(x=price)) + geom_bar(aes(fill=cut), binwidth=3000, position="fill") +
xlab("가격") + ylab("빈도") +
scale_fill_discrete("커팅") +
theme_gray()
?theme
ggplot(data=diamonds, aes(x=price)) + geom_bar(aes(fill=cut), binwidth=3000, position="fill") +
xlab("가격") + ylab("빈도") +
scale_fill_discrete("커팅") +
theme(axis.title.x=element_text("빈도2"))
?element_text
ggplot(data=diamonds, aes(x=price)) + geom_bar(aes(fill=cut), binwidth=3000, position="fill") +
xlab("가격") + ylab("빈도") +
scale_fill_discrete("커팅") +
theme(axis.title.x=element_text(angle=90))
ggplot(data=diamonds, aes(x=price)) + geom_bar(aes(fill=cut), binwidth=3000, position="fill") +
xlab("가격") + ylab("빈도") +
scale_fill_discrete("커팅") +
theme(axis.ticks.x=element_text(angle=90))
ggplot(data=diamonds, aes(x=price)) + geom_bar(aes(fill=cut), binwidth=3000, position="fill") +
xlab("가격") + ylab("빈도") +
scale_fill_discrete("커팅") +
theme(axis.text.x=element_text(angle=90))
ggplot(data=diamonds, aes(x=price)) + geom_bar(aes(fill=cut), binwidth=3000, position="fill") +
xlab("가격") + ylab("빈도") +
scale_fill_discrete("커팅") +
theme(axis.text.x=element_text(angle=90, y=.5))
?element_text
ggplot(data=diamonds, aes(x=price)) + geom_bar(aes(fill=cut), binwidth=3000, position="fill") +
xlab("가격") + ylab("빈도") +
scale_fill_discrete("커팅") +
theme(axis.text.x=element_text(angle=90, hjust=.5))
ggplot(data=diamonds, aes(x=price)) + geom_bar(aes(fill=cut), binwidth=3000, position="fill") +
xlab("가격") + ylab("빈도") +
scale_fill_discrete("커팅") +
theme(axis.text.x=element_text(angle=90, hjust=.7))
ggplot(data=diamonds, aes(x=price)) + geom_bar(aes(fill=cut), binwidth=3000, position="fill") +
xlab("가격") + ylab("빈도") +
scale_fill_discrete("커팅") +
theme(axis.text.x=element_text(angle=90, vjust=.7))
ggplot(data=diamonds, aes(x=price)) + geom_bar(aes(fill=cut), binwidth=3000, position="fill") +
xlab("가격") + ylab("빈도") +
scale_fill_discrete("커팅") +
theme(axis.text.x=element_text(angle=90, vjust=.5))
ggplot(data=diamonds, aes(x=price)) + geom_bar(aes(fill=cut), binwidth=3000, position="fill") +
xlab("가격") + ylab("빈도") +
scale_fill_discrete("커팅") +
theme(axis.text.x=element_text(angle=90, vjust=.1))
ggplot(data=diamonds, aes(x=price)) + geom_bar(aes(fill=cut), binwidth=3000, position="fill") +
xlab("가격") + ylab("빈도") +
scale_fill_discrete("커팅") +
theme(axis.text.x=element_text(angle=90, vjust=.2))
ggplot(data=diamonds, aes(x=price)) + geom_bar(aes(fill=cut), binwidth=3000, position="fill") +
xlab("가격") + ylab("빈도") +
scale_fill_discrete("커팅") +
theme(axis.text.x=element_text(angle=90, vjust=.3))
ggplot(data=diamonds, aes(x=price)) + geom_bar(aes(fill=cut), binwidth=3000, position="fill") +
xlab("가격") + ylab("빈도") +
scale_fill_discrete("커팅") +
theme(axis.text.x=element_text(angle=90, vjust=.4))
?element_text
windowsFont()
windowsFonts()
?windowsFonts
windowsFont("Malgun")
windowsFont("Malgun2")
?windowsFont
head(market_price)
market_price <- read.csv("https://dl.dropbox.com/u/8686172/marketprice.csv", fileEncoding="UTF-8")
head(market_price)
library(plyr)
ddply(market_price, .(A_NAME, M_TYPE_NAME), summarize, mean_price=mean(A_PRICE) )
ddply(market_price, .(A_NAME, M_TYPE_NAME), mean_price=mean(A_PRICE) )
library(snow)
registerDoSNOW(makeCluster(2, type = "SOCK"))
library(snow)
library(doSNOW)
registerDoSNOW(makeCluster(2, type = "SOCK"))
system.time({
ddply(market_price, .(A_NAME, M_TYPE_NAME), summarize, mean_price=mean(A_PRICE) )
})
system.time({
ddply(market_price, .(A_NAME, M_TYPE_NAME), summarize, mean_price=mean(A_PRICE),.parallel=TRUE)
})
cl <- makeCluster(2, type = "SOCK")
registerDoSNOW(cl)
system.time({
ddply(market_price, .(A_NAME, M_TYPE_NAME), summarize, mean_price=mean(A_PRICE),.parallel=TRUE)
})
stopCluster(cl)
install.packages("doSMP")
?makeCluster
cl <- makeCluster(c("localhost","localhost"), type = "SOCK")
registerDoSNOW(cl)
system.time({
ddply(market_price, .(A_NAME, M_TYPE_NAME), summarize, mean_price=mean(A_PRICE),.parallel=TRUE)
})
system.time({
a1<-ddply(market_price, .(A_NAME, M_TYPE_NAME), summarize, mean_price=mean(A_PRICE) )
})
system.time({
a2<- ddply(market_price, .(A_NAME, M_TYPE_NAME), summarize, mean_price=mean(A_PRICE),.parallel=TRUE)
})
a2
a1
install.packages("doMC")
install.packages("doMPI")
install.packages("Rmpi")
system.time({
a2<- ddply(market_price, .(A_NAME, M_TYPE_NAME), summarize, mean_price=mean(A_PRICE),.parallel=TRUE)
})
stopCluster(cl)
library(data.table)
?setkey
names(market_price.dt)
market_price.dt <- data.table(market_price) #--- (1)
market_price <- read.csv("https://dl.dropbox.com/u/8686172/marketprice.csv", fileEncoding="UTF-8")
market_price.dt <- data.table(market_price) #--- (1)
market_price.dt[2,list(M_NAME)] #--- (2)
market_price[2,"M_NAME",drop=F]
market_price.dt[,list(avg = mean(A_PRICE)), by=list(M_TYPE_NAME, A_NAME)]
setkey(market_price.dt, A_NAME)
head(market_price.dt)
market_price.dt[A_NAME == '고등어',]
setkey(market_price.dt)
head(market_price.dt)
market_price.dt[A_NAME == '고등어',]
setkey(market_price.dt, A_NAME)
market_price.dt['고등어']
setkey(market_price.dt)
market_price.dt['고등어']
head(market_price.dt)
market_price.dt[A_NAME == '고등어',]
18,200
18200 + 321390 + 548610 + 411070
321390 + 548610 + 411070
2457880 + 2282310
5202424 + 4196550
1426219 + 2800 + 6000 + 213248
7547204 + 1117640
1453000 + 3390000
library(reshape2)
?melt
recast(french_fries, time ~ variable, id.var = 1:4)
head(french_fries)
melt(iris)
melt(iris, id="Species")
melt(iris, id="Petal.Width")
melt(iris, id="Species")
head(melt(iris, id="Species", value.name = "val"))
iris.melt <- melt(iris, id="Species", value.name = "val")
library(ggplot2)
ggplot(iris.melt, aes(Species, val)) + geom_point(aes(colour=variable))
iris.melt <- melt(iris, id="Species", value.name = "cm")
ggplot(iris.melt, aes(Species, val)) + geom_point(aes(colour=variable))
ggplot(iris.melt, aes(Species, cm)) + geom_point(aes(colour=variable))
ggplot(iris.melt, aes(Species, cm)) + geom_point(aes(colour=variable)) + scale_color_brewer("Species")
ggplot(iris.melt, aes(Species, cm)) + geom_point(aes(colour=variable)) + scale_color_discrete("Species")
library(lubridate)
?ymd
x <- c(20090101, "2009-01-02", "2009 01 03", "2009-1-4",
"2009-1, 5", "Created on 2009 1 6", "200901 !!! 07")
ymd(x)
x <- c(20090101, "2009-01-02", "2009 01 03", "2009-1-4",
"2009-1, 5", "Created on 2009 1 6", "200901 !!! 07")
y <- ymd(x)
y
y + days()
?days
y - months(7)
dseconds(x = 1)
y + ddays()
?ddays
?days
y
y + ddays(2)
y + days(1) + hours(6) + minutes(30)
y + ddays(1) + dhours(6) + dminutes(30)
y
y + days(1) + ddays()
y + days(2)
y + dhours(1)
y + dhours(1) + dhours(2)
y + dhours(1) + hours(2)
y - months(7)
y[1] <- months(7)
y - months(7)
y
y - months(12)
1281070 + 848790
library(markdown)
?rpubsUpload
getOption("rpubs.upload.method")
options(rpubs.upload.method="internal")
getOption("rpubs.upload.method")
system("pandoc -o test.docx test.md")
knitr("test.Rmd")
library(knitr)
knitr("test.Rmd")
knit("test.Rmd")
knit("bicdata.Rmd", encoding="UTF-8")
system("pandoc -o bicdata.docx bicdata.md")
purl("bicdata.Rmd", encoding="UTF-8")
opts_chunk$set(comment=NA, fig.width=3, fig.height=3))
opts_chunk$set(comment=NA, fig.width=3, fig.height=3)
library(ProjectTemplate)
?as.POSIXct
as.POSIXct("2012-12-12")
as.POSIXct("20121212")
as.POSIXct("20121212", format="%Y%m%D")
as.POSIXct("20121212", format="%Y%m%d")
as.POSIXct("2012-12-12")
Sys.getlocale("LC_TIME")
Sys.getlocale()
option(width=60)
options(width=60)
option(width=60)
Sys.getlocale()
option(width=30)
options(width=30)
Sys.getlocale()
iris
head(iris)
options(width=60)
head(iris)
Sys.getlocale()
Sys.setlocale()
head(iris)
library(ProjectTemplate)
create.project("bicdata3")
setwd("bicdata/")
load.project()
ls()
head(titanic)
test.project()
test.project()
stub.tests()
test.project()
test.project
?test_dir
library(ggplot2)
ggplot(data = diamonds, aes(x = carat, y = price)) + geom_point(aes(colour = clarity)) +
geom_smooth()
ggplot(data = diamonds, aes(x = carat, y = price)) + geom_point(aes(colour = clarity)) +
geom_smooth(aes(colour=clarity))
ggplot(data = diamonds, aes(x = carat, y = price, colour = clarity)) +
geom_point()
+ geom_smooth()
ggplot(data = diamonds, aes(x = carat, y = price, colour = clarity)) +
geom_point()  +
geom_smooth()
nrow(diamonds)
png(filename="test.png",width=10, height=10)
png(filename="test.png",width=100, height=100)
ggplot(data = diamonds, aes(x = carat, y = price, colour = clarity)) +
geom_point()  +
geom_smooth()
dev.off()
png(filename="test2.png",width=100, height=100)
ggplot(data = diamonds, aes(x = carat, y = price, colour = clarity)) +
geom_point()  +
geom_smooth()
dev.off()
?png
png(filename="test2.png")
ggplot(data = diamonds, aes(x = carat, y = price, colour = clarity)) +
geom_point()  +
geom_smooth()
dev.off()
?ggsave
ymd(20121223)
Sys.getlocale()
Sys.setlocale(LC_TIME="C")
Sys.setlocale("LC_TIME", "C")
ymd(20121223)
getwd()
getwd("../")
setwd("../")
getwd()
knit("bicdata.Rmd", encoding="UTF-8")
knit("bicdata.Rmd", encoding="UTF-8")
system("pandoc -o bicdata.docx bicdata.md")
options("encoding")
options("rpubs.upload.method")
options(rpubs.upload.method="internal")
Sys.setlocale("LC_TIME", "C")
install.packages(c("colorspace", "dichromat", "shiny"))
library(markdown)
