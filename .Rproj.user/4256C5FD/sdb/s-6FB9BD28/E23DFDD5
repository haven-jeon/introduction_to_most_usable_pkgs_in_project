{
    "contents" : "Most usable packages in real projects\n========================================================\n\n\n![cloud][img1]\n\n1. ProjectTemplate 패키지\n1. ggplot2 패키지\n1. plyr, data.table 패키지\n1. reshape2 패키지\n1. lubridate 패키지\n1. knitr, markdown 패키지\n\n\n\n### [ProjectTemplate][protemp]\n\n* 프로젝트에 필요한 일반적인  디렉토리 및 파일 구조 정의\n* 프로젝트에 필요한 패키지 자동 로딩\n* 프로젝트에 필요한 데이터 자동 로딩 \n* 프로젝트에 필요한 데이터 전처리 \n\n```{r init1, echo=FALSE}\nopts_chunk$set(comment=NA, fig.width=5, fig.height=5, warning=FALSE, message=FALSE)\n```\n\n\n\n```{r init, eval=FALSE}\n\n\nlibrary(ProjectTemplate)\ncreate.project('bicdata')\nsetwd(\"bicdata/\")\nload.project()\n\n```\n\n* data 디렉토리에 수많은 데이터 포맷을 명시할 수 있음 \n  * 예를 들어 sqlite 파일이 포함이 될 경우 특정 테이블만 로딩할지 모두 로딩할지 정할 수 있음 \n  * MySQL, PostGres 또는 ODBC Databases에 접근해 특정 데이터를 자동으로 불러들임 \n  * 특정 디렉토리의 csv파일 혹은 R, RData 와 같은 파일 실행 후 데이터 로딩  \n  \n  \n```{r init2, eval=FALSE}\n#copy titanic to data dir\ntitanic <- read.csv(\"http://dl.dropbox.com/u/8686172/titanic.csv\")\nwrite.csv(titanic, file=\"data/titanic.csv\")\n\nload.project()\n\n#modify munging process\n#modify config file\n\n#load.project()\n\nshow.project()\n\n```\n\n* Unit Testing \n  * 주로 lib 디렉토리의 함수들을 대상 \n  * 함수를 수정하더라도 중요 테스팅을 자동으로 수행하게 함으로써 자신이 만든 R 함수들의 기능을 보장함 \n  \n\n```{r init3, eval=FALSE}\nstub.tests()\n\n#needs to be modified to \"test-*.R\"\ntest.project()\n```\n\n* `logging: on`일 경우 아래와 같은 메시지를 project.log 파일로 저장함\n* 전처리를 위한 munge 이하의 파일을 실행할 시 정보를 로깅하는 용도로 주로 사용 \n\n```{r init4, eval=FALSE}\n# if logging : on \nwarn(logger, \"This is warning\")\nscan(\"logs/project.log\", what=\"character\")\n\n```\n\n### [ggplot2]\n\n* Grammar of Graphics의 구현체 \n* \"기본 그래픽 시스템은 그림을 그리기 위해 좋은 툴이지만, ggplot2는 데이터를 이해하는 데 좋은 시각화 툴이다.\" --  _Hadley Wickham_ --\n* [참고](http://freesearch.pe.kr/archives/3134)\n\n```{r ggplot2, warning=FALSE, message=FALSE, fig.height=6 , fig.width=7}\nlibrary(ggplot2)\n\n# 서로 다른 표현\nqplot(carat, price, data = diamonds, geom=\"point\" ,colour=clarity) # (1)\nggplot(data=diamonds, aes(x=carat,y=price)) + geom_point(aes(colour=clarity))# (2)\n\n# 매핑 정보 및 각종 정보들을 보여줌\ns <- ggplot(data=diamonds, aes(x=carat,y=price)) \nsummary(s)\n\n# 미적 요소 매핑의 오버라이딩 \nggplot(data=diamonds, aes(x=carat,y=price)) + geom_point(aes(colour=clarity)) + \n  geom_smooth() #  (1)\n\nggplot(data=diamonds, aes(x=carat,y=price, colour=clarity)) +\n  geom_point() + geom_smooth() #  (2)\n\n#set기능으로 색상 적용 \n#http://research.stowers-institute.org/efg/R/Color/Chart/\nggplot(data=diamonds, aes(x=carat,y=price, colour=clarity))+ geom_point(colour=\"darkblue\")\n\n# group 매핑 \np <- ggplot(data=diamonds, aes(x=carat,y=price))\np + geom_smooth() #  (1)\np + geom_smooth(aes(group=clarity)) #  (2)\n\n# geom과 stat 객체 \nggplot(data=diamonds, aes(x=price)) + geom_bar() #  (1)\nggplot(data=diamonds, aes(x=price)) + geom_bar(aes(y=..count..)) #  (2)\nggplot(data=diamonds, aes(x=price)) + geom_bar(aes(y=..density..))\nggplot(data=diamonds, aes(x=price)) + geom_bar(aes(y=..ncount..))\nggplot(data=diamonds, aes(x=price)) + geom_bar(aes(y=..ndensity..))\nggplot(data=diamonds, aes(x=price)) + geom_bar(aes(y=..density..)) + ylab(\"밀도\")\n\n\n#위치 조정 \n\nggplot(data=diamonds, aes(x=price)) + geom_bar(aes(fill=cut), binwidth=3000)\nggplot(data=diamonds, aes(x=price)) + geom_bar(aes(fill=cut), binwidth=3000, position=\"dodge\")\nggplot(data=diamonds, aes(x=price)) + geom_bar(aes(fill=cut), binwidth=3000, position=\"fill\")\n\n#facet\nggplot(data=diamonds, aes(x=price)) + geom_bar(binwidth=3000) + facet_grid( . ~ cut)\nggplot(data=diamonds, aes(x=price))+ geom_bar(binwidth=3000) + facet_wrap( ~ cut,nrow=3)\n\n#geom과 stat의 결합 \nd <- ggplot(diamonds, aes(price))\nd + stat_bin(geom=\"bar\")\nd + stat_bin(geom=\"area\")\nd + stat_bin(aes(size=..ndensity..),geom=\"point\")\nd + stat_bin(aes(y=1, fill=..density..),geom=\"tile\")\n\n\n\n#레이블 및 텍스트 \nggplot(data=diamonds, aes(x=price)) + geom_bar(aes(fill=cut), binwidth=3000, position=\"fill\") + \n  xlab(\"가격\") + ylab(\"빈도\") + \n  scale_fill_discrete(\"커팅\") + \n  theme(axis.text.x=element_text(angle=90, vjust=.4))\n\n```\n\n* [더 많은 예제](http://docs.ggplot2.org/current/)\n\n\n### [plyr], [data.table]\n\n* split-combind-apply\n* R에서 가장 직관적이고 강력한 데이터 집계 라이브러리\n* 멀티코어 프로세싱을 손쉽게 이용가능함 \n* aggregate, tapply, by 류의 함수를 대체 가능한 함수 제공 \n\n예)\n\n![split_apply][img2]\n\n\n```{r plyr}\nlibrary(ggplot2)\nlibrary(plyr)\n\nmarket_price <- read.csv(\"http://dl.dropbox.com/u/8686172/marketprice.csv\", fileEncoding=\"UTF-8\")\n\n\n\n# ggplot(market_price, aes(x=A_NAME, y=A_PRICE, colour=M_TYPE_NAME)) +\n#   geom_boxplot(outlier.size=0) +\n#   stat_summary(aes(group=M_TYPE_NAME),fun.y=\"mean\", geom=\"line\", size=1, alpha=I(0.7))+\n#   opts(axis.text.x=theme_text(angle=90))\n\nddply(market_price, .(A_NAME, M_TYPE_NAME), summarize, mean_price=mean(A_PRICE) )\n\n```\n\n```{r domc, echo=TRUE,eval=FALSE}\n#멀티코어사용 \n\nlibrary(doSNOW)\ncl <- makeCluster(c(\"localhost\",\"localhost\"), type = \"SOCK\")\nregisterDoSNOW(cl)\n\nsystem.time({\n  a1<-ddply(market_price, .(A_NAME, M_TYPE_NAME), summarize, mean_price=mean(A_PRICE) )\n})\n\nsystem.time({\n  a2<- ddply(market_price, .(A_NAME, M_TYPE_NAME), summarize, mean_price=mean(A_PRICE),.parallel=TRUE)\n})\n\nstopCluster(cl)\n\n\n#for Linux on my case\nlibrary(doMC)\nregisterDoMC()\n\nsystem.time({\n  a3<- ddply(market_price, .(A_NAME, M_TYPE_NAME), summarize, mean_price=mean(A_PRICE),.parallel=TRUE)\n})\n\n```\n\n\n#### [data.table]\n\n\n\n\n```{r datatable}\nlibrary(data.table)\n\nmarket_price.dt <- data.table(market_price) #--- (1)\n\nmarket_price.dt[2,list(M_NAME)] #--- (2) \n\nmarket_price[2,\"M_NAME\",drop=F]\n\nmarket_price.dt[,list(avg = mean(A_PRICE)), by=list(M_TYPE_NAME, A_NAME)]\n\n\nsetkey(market_price.dt, A_NAME)\nmarket_price.dt['고등어']\nhead(market_price.dt)\nsetkey(market_price.dt)\n\n\nmarket_price.dt[A_NAME == '고등어',]\n#market_price.dt['고등어']\nhead(market_price.dt)\n\n\n\n```\n\n\n### [reshape2]\n\n* 집계 보다는 데이터의 형태를 바꾸는 작업을 수행 \n* ggplot2에서 시각화를 위한 데이터 전처리 부분에서 주로 사용 \n\n```{r reshape2}\n\nlibrary(reshape2)\n\nhead(iris)\n\niris.melt <- melt(iris, id=\"Species\", value.name = \"cm\")\n\nhead(iris.melt)\n\nggplot(iris.melt, aes(Species, cm)) + geom_point(aes(colour=variable)) + scale_color_discrete(\"Species\")\n```\n\n\n### [lubridate]\n\n* 실무에서 쓰는 다양한 숫자 스트링 포맷에 대한 간편한 변환 제공 \n* 시간과 날짜에 대한 다양한 연산 제공 \n* 한글 윈도우 문제...\n\n```{r lub_error, eval=FALSE}\nlibrary(lubridate)\n \nas.POSIXct(\"2012-12-12\")\nas.POSIXct(\"20121212\", format=\"%Y%m%d\")\n\nSys.getlocale(\"LC_TIME\")\n# [1] \"Korean_Korea.949\"\n \nymd(\"2013-01-03\")\n# 다음에 오류gsub(\"+\", \"*\", fixed = T, gsub(\">\", \"_e>\", num)) : '<ec><98><a4>?<84>|<ec>삤<ed>썑)(?![[:alpha:]]))|((?<h_f_e>2[0-4]|[01]?\\d)\\D+(?<m_f_e>[0-5]?\\d)\\D+((?<os_f_s_e>[0-5]?\\d\\.\\d+)|(?<s_f_e>[0-6]?\\d))))'에 잘못된 멀티 바이트 문자가 있습니다\n \nSys.setlocale(\"LC_TIME\", \"C\")\n# [1] \"C\"\nymd(\"2013-01-03\")\n# 1 parsed with %Y-%m-%d\n# [1] \"2013-01-03 UTC\"\n \n \n \nSys.setlocale(\"LC_TIME\", \"Korean_Korea.949\")\nformat(Sys.time(), \"%a %b %d %X %Y %Z\")\n# [1] \"목 1 03 오후 2:26:21 2013 KST\"\n \nSys.setlocale(\"LC_TIME\", \"C\")\nformat(Sys.time(), \"%a %b %d %X %Y %Z\")\n# [1] \"Thu Jan 03 14:26:34 2013 KST\"\n```\n\n\n\n```{r lubridate}\nlibrary(lubridate)\n\nx <- c(20090101, \"2009-01-02\", \"2009 01 03\", \"2009-1-4\",\n       \"2009-1, 5\", \"Created on 2009 1 6\", \"200901 !!! 07\")\ny <- ymd(x)\n\n\ny\n\ny + days(1) + hours(6) + minutes(30)\n\ny - months(12)\n```\n\n\n### [knitr], [markdown]\n\n* [knitr]는 인코딩 문제로 그동안 윈도우에서 쓰기 힘들었으나 최신 버전에서 옵션 제공 \n  * 문서내의 R 코드를 실행 후 이를 문서에 첨부해줌 \n  * 문서내의 R 코드에 대해서 미적 옵션을 다양하게 제공함 \n* [markdown]은 markdown 문서를 주로 xhtml형태로 변환해줌\n  * RStudio에서 잘 지원하고 있음 \n  * 실무 분석 draft 문서는 Rmd파일로 작성 하고 분석 내용 공유 용이  \n\n```{r knitr, eval=FALSE}\nlibrary(knitr)\n\nknit(\"bicdata.Rmd\", encoding=\"UTF-8\")\n\npurl(\"bicdata.Rmd\", encoding=\"UTF-8\")\nsystem(\"pandoc -o bicdata.docx bicdata.md\")\n\n```\n\n#### 윈도우 작업시 주의사항 \n* 문서는 반드시 UTF-8 인코딩으로 작성한다.\n* knit, purl명령어 사용시 반드시 `encoding=\"UTF-8\"`을 명시한다.\n\n\n\n### 마지막 예제 \n\n* knitr로 하는 Latex \n\n\n\n[protemp]:http://projecttemplate.net/mastering.html \n[ggplot2]:http://ggplot2.org/\n[plyr]:http://cran.r-project.org/web/packages/plyr/index.html\n[data.table]:http://datatable.r-forge.r-project.org/\n[reshape2]:http://cran.r-project.org/web/packages/reshape2/index.html\n[lubridate]:http://cran.r-project.org/web/packages/lubridate/index.html\n[knitr]:http://yihui.name/knitr/\n[markdown]:http://cran.r-project.org/web/packages/markdown/index.html\n[img1]: packages.png\n[img2]: splitapply.png",
    "created" : 1358919307929.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1525464446",
    "id" : "E23DFDD5",
    "lastKnownWriteTime" : 1359165317,
    "path" : "D:/work/bicdata/bicdata.Rmd",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}